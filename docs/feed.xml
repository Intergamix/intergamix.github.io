<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://www.damonc.top/</id><title>afeng</title><subtitle>云上日志</subtitle> <updated>2022-10-27T12:10:09+08:00</updated> <author> <name>阿锋</name> <uri>https://www.damonc.top/</uri> </author><link rel="self" type="application/atom+xml" href="https://www.damonc.top/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://www.damonc.top/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 阿锋 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Unity基础光照(翻译四)</title><link href="https://www.damonc.top/posts/Unity-First-light/" rel="alternate" type="text/html" title="Unity基础光照(翻译四)" /><published>2018-01-03T08:00:00+08:00</published> <updated>2022-10-23T22:00:00+08:00</updated> <id>https://www.damonc.top/posts/Unity-First-light/</id> <content src="https://www.damonc.top/posts/Unity-First-light/" /> <author> <name>catlikecoding</name> </author> <category term="翻译" /> <category term="Shader" /> <summary> 本篇摘要 将法线从对象空间转换为世界空间。 使用方向光。 计算光的漫反射和镜面反射。 调整光的能耗强度。 应用金属工作流程。 学习使用Unity的PBS算法。 光照投射到物体. 法线 Normals 可见光是电磁波谱中人眼可以感知的部分，可见光谱没有精确的范围。我们可以看到电磁波谱的一部分，也就是我们所知的可见光，因为人眼睛可以检测到电磁辐射，而光谱的其余部分对我们来说是不可见的。光的单个光量子被称为光子 整个电磁频谱是多少？ 光谱被分成光谱带。从低频到高频，这些被称为无线电波、微波、红外线、可见光、紫外线、X 射线和伽马射线。 光源发出一束光，一些光会照射到物体上，一些光会从物体反射回来。如果那道反射到光最终照射到我们的眼睛或相机镜头上，那么我们就会看到这个物体。 为了能看见游戏里的物体，我们已知道模型表... </summary> </entry> <entry><title>Unity 多纹理融合(翻译三)</title><link href="https://www.damonc.top/posts/Unity-Combine-Texture/" rel="alternate" type="text/html" title="Unity 多纹理融合(翻译三)" /><published>2018-01-02T20:00:00+08:00</published> <updated>2022-10-23T22:00:00+08:00</updated> <id>https://www.damonc.top/posts/Unity-Combine-Texture/</id> <content src="https://www.damonc.top/posts/Unity-Combine-Texture/" /> <author> <name>catlikecoding</name> </author> <category term="翻译" /> <category term="Shader" /> <summary> 本篇摘要： 采样多个纹理 应用细节纹理 处理线性空间中的颜色 使用 splat 地图 纹理合并 融合多张纹理. 贴图在游戏应用广泛，但它们有局限性。无论以何种尺寸显示，它们都有固定数量的像素。如果需要被渲染到很小网格，可以使用mipmap来保持它们的部分细节。但是当渲染到很大的网格上，会变得模糊。我们也不能无中生有地渲染更多额外的细节。本文讨论了一些解决办法。 细节纹理 通常可以使用更大的纹理，意味着更多的像素和更多的细节。但是纹理的大小也是有限制的，取决于游戏包体大小和目标平台的内存，以及gpu采样能力。 另一种增加像素密度的方法是平铺纹理。出一张尽可能小的贴图，设置为重复模式。近距离观察下重复感可能不会很明显。毕竟当你站着用鼻子接触墙壁时，你只会看到整面墙壁的一小部分。 因此，我们能够通过拉伸与平铺纹理相结合的方式来尽可... </summary> </entry> <entry><title>Unity Shader Fundamentals(翻译二)</title><link href="https://www.damonc.top/posts/Unity-Shader-Fundamentals/" rel="alternate" type="text/html" title="Unity Shader Fundamentals(翻译二)" /><published>2018-01-02T16:00:00+08:00</published> <updated>2022-10-23T22:00:00+08:00</updated> <id>https://www.damonc.top/posts/Unity-Shader-Fundamentals/</id> <content src="https://www.damonc.top/posts/Unity-Shader-Fundamentals/" /> <author> <name>catlikecoding</name> </author> <category term="翻译" /> <category term="Shader" /> <summary> 本篇摘要信息 顶点变换 Color pixels shader 属性 从顶点传数据至片元函数 查看编译后的shader代码 场景初始化 新建一个默认场景，新建一个圆球。这个默认场景本身进行了大量复杂的渲染，为了更容易的掌握Unity的渲染过程，我们先做一些简化设置，把默认的某些花里胡哨的东西先剥离掉。 剥离天空盒 打开Window-Lighting，查看光照设置选项。弹出带有3个选项卡的面板，我们先关注Scene选项卡. 默认光照. 第一选项卡Environment是跟环境光照相关，在这里可以设置天空盒。这个Default-Skybox当前正被用于场景的背景光、环境光、和反射光。设置为none就能关闭这些光。顺便把下面的Realtime Ligting和Mixed Lighting也关掉，现在还用不上，后面会陆续介绍。 ... </summary> </entry> <entry><title>Unity Transform&amp;Matrix(翻译一)</title><link href="https://www.damonc.top/posts/Unity-Matrix&amp;Transform/" rel="alternate" type="text/html" title="Unity Transform&amp;Matrix(翻译一)" /><published>2018-01-01T09:00:00+08:00</published> <updated>2022-10-22T16:38:08+08:00</updated> <id>https://www.damonc.top/posts/Unity-Matrix&amp;Transform/</id> <content src="https://www.damonc.top/posts/Unity-Matrix&amp;Transform/" /> <author> <name>catlikecoding</name> </author> <category term="翻译" /> <category term="Shader" /> <summary> 本篇摘要信息 matrix介绍 matrix推导 模拟transform缩放 旋转 位移功能 可视空间 Unity Shader是怎么知道一个像素该画在哪个位置？下面是先展示一组Cube，一步步分析下去 cube数组. 操控一组3维坐标 创建一组10*10*10的3维Cube数组，并作为UnityMatrices对象的成员变量，接下来显示这些Cube在空间中的位置 void InitCubeArray() { for (int i =0 , z = 0; z &amp;lt; generalCount; z++) { for (int y = 0; y &amp;lt; generalCount; y++) { for (int x = 0; x &amp;lt; genera... </summary> </entry> <entry><title>CG函数标准库</title><link href="https://www.damonc.top/posts/CG-function-library/" rel="alternate" type="text/html" title="CG函数标准库" /><published>2017-10-03T20:17:00+08:00</published> <updated>2022-10-18T17:58:42+08:00</updated> <id>https://www.damonc.top/posts/CG-function-library/</id> <content src="https://www.damonc.top/posts/CG-function-library/" /> <author> <name>afeng</name> </author> <category term="Unity3D" /> <category term="Shader" /> <summary> 数学函数（Mathematical Functions） 下表中列举了 Cg 标准函数库中所有的数学函数， 这些数学函数用于执行数 学上常用计算，包括：三角函数、幂函数、园函数、向量和矩阵的操作函数。这 些函数都被重载，以支持标量数据和不同长度的向量作为输入参数。 函数 功能 abs(x) 返回输入参数的绝对值 all(x) 如果输入参数均不为 0，则返回 ture；否则返回 flase。 &amp;amp;&amp;amp;运算 any(x) 输入参数只要有其中一个不为 0，则返回true。 clamp(x,a,b) 如果 x 值小于 a，则返回 a；如果 x 值大于... </summary> </entry> </feed>
