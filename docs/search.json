[
  
    {
      "title"    : "Unity Addressable Group结构",
      "category" : "",
      "tags"     : "Unity3d and Addressable",
      "url"      : "/Unity_Addressabel_Group/",
      "date"     : "Jul 12, 2024",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-07-12T20:00:00+08:00'>12 Jul 2024</time></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_Addressabel_Group/'>Unity Addressable Group结构</a> </h2></div></div></div>"
    } ,
  
    {
      "title"    : "Unity Addressable Editor结构",
      "category" : "",
      "tags"     : "Unity3d and Addressable",
      "url"      : "/Unity_Addressable_Editor/",
      "date"     : "Jul 10, 2024",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-07-10T20:00:00+08:00'>10 Jul 2024</time><a class='article__image' href='/Unity_Addressable_Editor/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender1/cubearray.png' alt='Unity Addressable Editor结构'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_Addressable_Editor/'>Unity Addressable Editor结构</a> </h2><p class='article__excerpt'>总结在使用Unity Addressable System过程中遇到的一部分问题，该篇主要记录Addressable在Unity编辑器的各种组织结构，本文Addressable后续简称AA。</p></div></div></div>"
    } ,
  
    {
      "title"    : "视差和法线、高度图回顾(翻译二十)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_Parallax_Normals_Heightmap/",
      "date"     : "Jan 25, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-25T20:00:00+08:00'>25 Jan 2018</time><a class='article__image' href='/Unity_Parallax_Normals_Heightmap/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender20/batched-correct.png' alt='视差和法线、高度图回顾(翻译二十)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_Parallax_Normals_Heightmap/'>视差和法线、高度图回顾(翻译二十)</a> </h2><p class='article__excerpt'>由于视角的原因，当调整摄像机位置时，观察到的事物的相对位置会发生变化，这种视觉现象称为视差。在坐火车高速行驶看窗外的景物，附近的物体看起来很大并且移动很快，而远处的背景看起来很小并且移动较慢。渲染时，相机使用透视模式时，也会出现视差。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity GPU Instance(翻译十九)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_GPU_Instance/",
      "date"     : "Jan 24, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-24T20:00:00+08:00'>24 Jan 2018</time><a class='article__image' href='/Unity_GPU_Instance/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender19/1692664-20200612010921540-656727216.png' alt='Unity GPU Instance(翻译十九)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_GPU_Instance/'>Unity GPU Instance(翻译十九)</a> </h2><p class='article__excerpt'>还有另一种组合draw call的方法：GPU instance或Geometry instance。与动态批处理一样，此操作在运行时针对可见对象。 它的目标是让GPU一次性渲染同一网格的多个副本。 因此，它不能组合不同的网格或材质，但不仅限于小网格。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity 实时 GI &amp; LPPV &amp; LOD(翻译十八)",
      "category" : "",
      "tags"     : "Shader and Unity3d API",
      "url"      : "/Unity_RealTime_GI_LOD/",
      "date"     : "Jan 23, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-23T20:00:00+08:00'>23 Jan 2018</time><a class='article__image' href='/Unity_RealTime_GI_LOD/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender18/1692664-20200605013249358-581600268.gif' alt='Unity 实时 GI &amp; LPPV &amp; LOD(翻译十八)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_RealTime_GI_LOD/'>Unity 实时 GI &amp; LPPV &amp; LOD(翻译十八)</a> </h2><p class='article__excerpt'>了解间接光需要知道光在静态表面之间如何反射。重点在于哪些表面可能会受到其他表面的影响，以及程度如何。弄清这些关系需要做很多的工作，不能实时完成。所以这个数据由编辑器处理并存储在运行时使用。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity 混合光照(翻译十七)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_Mix_Lighting/",
      "date"     : "Jan 21, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-21T20:00:00+08:00'>21 Jan 2018</time><a class='article__image' href='/Unity_Mix_Lighting/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender17/1692664-20200603002345136-2052798411.png' alt='Unity 混合光照(翻译十七)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_Mix_Lighting/'>Unity 混合光照(翻译十七)</a> </h2><p class='article__excerpt'>烘焙光照有间接光而没有实时光照，因为间接光需要光照贴图。由于间接光可以为场景加入很大的真实感，如果我们可以将它和实时光照融合在一起就再好不过了。这是可以的，但也意味着着色的开销会增加。我们需要将混合光（Mixed Lighting）的光照模式（Lighting Mode）设置为烘焙间接（Baked Indirect）。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity 光照烘焙(翻译十六)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_Static_Lightting/",
      "date"     : "Jan 19, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-19T20:00:00+08:00'>19 Jan 2018</time><a class='article__image' href='/Unity_Static_Lightting/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender16/1692664-20200601224702732-797999005.gif' alt='Unity 光照烘焙(翻译十六)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_Static_Lightting/'>Unity 光照烘焙(翻译十六)</a> </h2><p class='article__excerpt'>为什么没有立即得到烘焙光源？为了确保在需要的时候光照贴图可以实际生成和更新，请在光照窗口的底部启用“自动生成（Auto Generate）”。 否则，你必须手动生成新的光照贴图。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity Deferred Lights-延迟光照(翻译十五)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_Deferred_Lights/",
      "date"     : "Jan 17, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-17T20:00:00+08:00'>17 Jan 2018</time><a class='article__image' href='/Unity_Deferred_Lights/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender15/1692664-20200519084812390-1178609122.png' alt='Unity Deferred Lights-延迟光照(翻译十五)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_Deferred_Lights/'>Unity Deferred Lights-延迟光照(翻译十五)</a> </h2><p class='article__excerpt'>当阴影几乎快达到了该限定距离就会淡出，Unity内置的shader是这样设定并计算。由于我将手动采样该阴影纹理，当到达纹理的边缘时阴影会被截取，结果是阴影虽然消失了，但有被急剧切割的生硬画面。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity Shader Fog(翻译十四)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/UNity_Shader_Fog/",
      "date"     : "Jan 15, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-15T20:00:00+08:00'>15 Jan 2018</time><a class='article__image' href='/UNity_Shader_Fog/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender14/1692664-20200518004352199-224022866.png' alt='Unity Shader Fog(翻译十四)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/UNity_Shader_Fog/'>Unity Shader Fog(翻译十四)</a> </h2><p class='article__excerpt'>一个精确的大气干扰光线渲染将需要及其昂贵的体积测量方法，那是大多数现代GPU负担不起的。相反，勉强采用一些常量雾参数近似模拟。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity Shader 延迟渲染(翻译十三)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_Deferred_Shading/",
      "date"     : "Jan 10, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-10T20:00:00+08:00'>10 Jan 2018</time><a class='article__image' href='/Unity_Deferred_Shading/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender13/1692664-20200510154452501-654159285.png' alt='Unity Shader 延迟渲染(翻译十三)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_Deferred_Shading/'>Unity Shader 延迟渲染(翻译十三)</a> </h2><p class='article__excerpt'>没有阴影下，128次几何绘制加1次Clear；1次天空盒绘制；2次屏幕处理绘制，总共132次Draw Call。(如果是使用一个方向光，动态批处理就会生效，就可以少于64个批次绘制)。然而由于有一个额外的方向光，dynamicBatching就不会生效，所以总共绘制两遍。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity 透明渲染(翻译十二)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_Shader_Transparent_2/",
      "date"     : "Jan 9, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-09T20:00:00+08:00'>09 Jan 2018</time><a class='article__image' href='/Unity_Shader_Transparent_2/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender12/1692664-20200412182420148-1157761308.png' alt='Unity 透明渲染(翻译十二)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_Shader_Transparent_2/'>Unity 透明渲染(翻译十二)</a> </h2><p class='article__excerpt'>翻译11介绍了镂空渲染，可能也注意到了，物体的投射的阴影是物体本身的形状，跟镂空形状完全不一致。这是因为我们之前的Shader投射阴影只是简单的采样了光的方向和到达物体表面的距离，没有区分表面形状。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity 透明渲染(翻译十一)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_Shader_Transparent_1/",
      "date"     : "Jan 8, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-08T20:00:00+08:00'>08 Jan 2018</time><a class='article__image' href='/Unity_Shader_Transparent_1/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender11/1692664-20200407013839019-192734258.png' alt='Unity 透明渲染(翻译十一)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_Shader_Transparent_1/'>Unity 透明渲染(翻译十一)</a> </h2><p class='article__excerpt'>在不透明的材质，每个通过深度测试的片元都会被渲染，所有的片元都是不透明的并且写入深度缓冲。所以实现透明最简单快捷的方法是：在深度测试时，要么它完全不透明，要么它完全透明。如果它是透明就不渲染。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity Shader GUI 扩展二(翻译十)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_ShaderGUI_Extension_2/",
      "date"     : "Jan 7, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-07T22:00:00+08:00'>07 Jan 2018</time><a class='article__image' href='/Unity_ShaderGUI_Extension_2/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender10/1692664-20200406002438806-745344487.png' alt='Unity Shader GUI 扩展二(翻译十)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_ShaderGUI_Extension_2/'>Unity Shader GUI 扩展二(翻译十)</a> </h2><p class='article__excerpt'>如何增强呢？通常我们使用了法线来增强模型表面的凹凸层次感，法线带来的视觉增强是第一步，但是法线只适用于采样直接光照下。现在开始第二步增强，给凹凸表面引入阴影：凸向凹投射阴影</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity Shader GUI 扩展一(翻译九)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_ShaderGUI_Extension_1/",
      "date"     : "Jan 7, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-07T20:00:00+08:00'>07 Jan 2018</time><a class='article__image' href='/Unity_ShaderGUI_Extension_1/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender9/1692664-20200306014758149-232656592.png' alt='Unity Shader GUI 扩展一(翻译九)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_ShaderGUI_Extension_1/'>Unity Shader GUI 扩展一(翻译九)</a> </h2><p class='article__excerpt'>选中当前材质后，若材质使用的Shader调用了GUI拓展，则会自动读取该Shader的所有属性。通过重实现OnGUI函数后，获取其参数地址就能读取。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity Reflection 反射(翻译八)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_Reflection/",
      "date"     : "Jan 6, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-06T20:00:00+08:00'>06 Jan 2018</time><a class='article__image' href='/Unity_Reflection/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender8/1692664-20200222220852598-1153450081.png' alt='Unity Reflection 反射(翻译八)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_Reflection/'>Unity Reflection 反射(翻译八)</a> </h2><p class='article__excerpt'>一块完美的镜子是不会发生漫反射，但现在我们自己的Shader包含的光照：环境光、漫反射、高光反射、纹理、阴影，结果看起来蛮好。但是当把Metallic设为1，Smoothness设位0.95，看起来很亮就很不自然了。从下图看尽管颜色是白色但整个表面都是黑色，只有一个很小的高亮点。这个亮点形成1是光源的入射，2朝向观察者的反射。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity Shadow 阴影(翻译七)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_Shadows/",
      "date"     : "Jan 5, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-05T20:00:00+08:00'>05 Jan 2018</time><a class='article__image' href='/Unity_Shadows/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender7/1692664-20191218085818298-1814779079.png' alt='Unity Shadow 阴影(翻译七)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_Shadows/'>Unity Shadow 阴影(翻译七)</a> </h2><p class='article__excerpt'>当一个物体位于光源和另一个物体之间时，它可能会阻止部分或全部光线到达另一个物体。这些光线照亮了第一个物体就不再可能照亮第二个物体。因此，第二个物体有一部不发光，而不发光的区域位于第一个物体的阴影下。我们通常是这样描述：第一个物体投射了一个阴影到第二个物体。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity 纹理高级用法(翻译六)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_Advance_Texture/",
      "date"     : "Jan 4, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-04T20:00:00+08:00'>04 Jan 2018</time><a class='article__image' href='/Unity_Advance_Texture/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender6/1692664-20191105100150635-879071241.png' alt='Unity 纹理高级用法(翻译六)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_Advance_Texture/'>Unity 纹理高级用法(翻译六)</a> </h2><p class='article__excerpt'>高度图为了模拟平面的凹凸程度，将高度(黑白色)数据存储在纹理中，由于纹理数据是二维的，即u轴和v轴，那为了得到这些数据为每个片段生成法向量，可分别在u轴和v轴上采样。先从U轴计算：f(u)=h ,如果知道了斜率就能求</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity 基础光照多光源采样(翻译五)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_Multi_Light/",
      "date"     : "Jan 3, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-03T09:00:00+08:00'>03 Jan 2018</time><a class='article__image' href='/Unity_Multi_Light/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender5/1692664-20200206155319086-415300986.png' alt='Unity 基础光照多光源采样(翻译五)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_Multi_Light/'>Unity 基础光照多光源采样(翻译五)</a> </h2><p class='article__excerpt'>在文件目录中手动创建一个MyLighting.cginc文件，再把FirstLighting.shader内从#pragma以下到ENDCG以上区间内代码拷贝进*MyLighting.cginc*文件。这样我们不直接在shader中写这些重复的代码，而是通过include引用。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity 基础光照(翻译四)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_First_light/",
      "date"     : "Jan 3, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-03T08:00:00+08:00'>03 Jan 2018</time><a class='article__image' href='/Unity_First_light/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender4/tutorial-image.jpg' alt='Unity 基础光照(翻译四)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_First_light/'>Unity 基础光照(翻译四)</a> </h2><p class='article__excerpt'>要合并网格，必须将它们从本地空间转换为世界空间。对象是否被批处理以及如何被合批有一方面取决于它们如何排序以进行渲染。由于这种转换也会影响法线，这就是我们看到颜色变化的原因。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity 多纹理融合(翻译三)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_Combine_Texture/",
      "date"     : "Jan 2, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-02T20:00:00+08:00'>02 Jan 2018</time><a class='article__image' href='/Unity_Combine_Texture/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender3/tutorial-image.jpg' alt='Unity 多纹理融合(翻译三)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_Combine_Texture/'>Unity 多纹理融合(翻译三)</a> </h2><p class='article__excerpt'>贴图在游戏应用广泛，但它们有局限性。无论以何种尺寸显示，它们都有固定数量的像素。如果需要被渲染到很小网格，可以使用mipmap来保持它们的部分细节。但是当渲染到很大的网格上，会变得模糊。我们也不能无中生有地渲染更多额外的细节。本文讨论了一些解决办法。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity Shader 基本语法(翻译二)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_Shader_Fundamentals/",
      "date"     : "Jan 2, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-02T16:00:00+08:00'>02 Jan 2018</time><a class='article__image' href='/Unity_Shader_Fundamentals/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender2/rendering-quality.png' alt='Unity Shader 基本语法(翻译二)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_Shader_Fundamentals/'>Unity Shader 基本语法(翻译二)</a> </h2><p class='article__excerpt'>新建一个默认场景，新建一个圆球。这个默认场景本身进行了大量复杂的渲染，为了更容易的掌握Unity的渲染过程，我们先做一些简化设置，把默认的某些花里胡哨的东西先剥离掉。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Unity 基本矩阵(翻译一)",
      "category" : "",
      "tags"     : "Shader",
      "url"      : "/Unity_Matrix_Transform/",
      "date"     : "Jan 1, 2018",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2018-01-01T09:00:00+08:00'>01 Jan 2018</time><a class='article__image' href='/Unity_Matrix_Transform/'> <img src='https://damonc-top2.github.io/web-assets/posts/2018/month1/catRender1/cubearray.png' alt='Unity 基本矩阵(翻译一)'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/Unity_Matrix_Transform/'>Unity 基本矩阵(翻译一)</a> </h2><p class='article__excerpt'>与正交投影最大的不同是这些点不会直接移向到平面，而是他们会移向摄像机的位置，当然这只对位于摄像机前面的点有效，而在摄像机后面的点就不会正确的投影。先确保所有点都能位于摄像机的前方，把摄像机。</p></div></div></div>"
    } ,
  
    {
      "title"    : "CG函数标准库",
      "category" : "",
      "tags"     : "CG",
      "url"      : "/CG_Function_Library/",
      "date"     : "Oct 3, 2017",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2017-10-03T20:17:00+08:00'>03 Oct 2017</time><a class='article__image' href='/CG_Function_Library/'> <img src='https://damonc-top2.github.io/web-assets/posts/2017/cgbook.jpg' alt='CG函数标准库'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/CG_Function_Library/'>CG函数标准库</a> </h2><p class='article__excerpt'>贴图在游戏应用广泛，但它们有局限性。无论以何种尺寸显示，它们都有固定数量的像素。如果需要被渲染到很小网格，可以使用mipmap来保持它们的部分细节。但是当渲染到很大的网格上，会变得模糊。我们也不能无中生有地渲染更多额外的细节。本文讨论了一些解决办法。</p></div></div></div>"
    } ,
  
    {
      "title"    : "Markdown语法集合速查表",
      "category" : "",
      "tags"     : "Markdown",
      "url"      : "/markdown_cheatSheet/",
      "date"     : "Mar 17, 2016",
      "content"  : "[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.category }}&quot;,      &quot;tags&quot;     : &quot;{{ post.tags | array_to_sentence_string }}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date | date: &#39;%b %-d, %Y&#39; }}&quot;,      &quot;content&quot;  : &quot;{{ page.content | strip_html | strip_newlines | remove_chars | escape }}&quot;,      &quot;article&quot;  : &quot;   {{post.date | date_to_string}}{% if post.video_embed %}     {% endif %}{% if post.image %}  {% endif %}  {{post.title | escape}} {% if post.description %}{{post.description | escape}}{% endif %}&quot;    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2016-03-17T11:17:00+08:00'>17 Mar 2016</time><a class='article__image' href='/markdown_cheatSheet/'> <img src='https://damonc-top2.github.io/web-assets/posts/2016/markdown.png' alt='Markdown语法集合速查表'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/markdown_cheatSheet/'>Markdown语法集合速查表</a> </h2><p class='article__excerpt'>贴图在游戏应用广泛，但它们有局限性。无论以何种尺寸显示，它们都有固定数量的像素。如果需要被渲染到很小网格，可以使用mipmap来保持它们的部分细节。但是当渲染到很大的网格上，会变得模糊。我们也不能无中生有地渲染更多额外的细节。本文讨论了一些解决办法。</p></div></div></div>"
    } 
  
]
